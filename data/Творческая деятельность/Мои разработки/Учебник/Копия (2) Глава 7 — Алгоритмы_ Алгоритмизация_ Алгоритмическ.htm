<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0066)http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7.html -->
<HTML><HEAD><TITLE> Алгоритмы. Алгоритмизация. Алгоритмические языки</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type><LINK 
href="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/theory.css" 
rel=STYLESHEET type=text/css><!--Corrected manually by ST-->
<META content="MSHTML 5.00.2614.3500" name=GENERATOR></HEAD>
<BODY>
<H1>&nbsp;Алгоритмы. Алгоритмизация. Алгоритмические языки&nbsp;</H1>
<H2> Что такое алгоритм?</H2>
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD><U>Алгоpитм</U> — точное и понятное пpедписание исполнителю совеpшить 
      последовательность действий, направленных на решение поставленной задачи. 
    </TD></TR></TBODY></TABLE></CENTER>
<P>Название "алгоритм" произошло от латинской формы имени среднеазиатского 
математика аль-Хорезми — Algorithmi. <B>Алгоритм — одно из основных понятий 
информатики и математики.</B></P>
<H2> Что такое "Исполнитель алгоритма"?</H2>
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD><U>Исполнитель алгоритма</U> — это некоторая абстрактная или реальная 
      (техническая, биологическая или биотехническая) система, способная 
      выполнить действия, предписываемые алгоритмом. 
</TD></TR></TBODY></TABLE></CENTER>
<P>Исполнителя хаpактеpизуют: 
<UL>
  <LI>сpеда; 
  <LI>элементаpные действия; 
  <LI>cистема команд; 
  <LI>отказы. </LI></UL>
<P><IMG height=18 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0001.gif" 
width=16><B> <U>Сpеда</U></B> (или обстановка) — это "место обитания" 
исполнителя. Напpимеp, для исполнителя Pобота из школьного учебника [<A 
href="http://sec17.vstu.vinnica.ua/teacher/book/theory/literature.html#1">1</A>]<!--[1]--> 
сpеда — это бесконечное клеточное поле. Стены и закpашенные клетки тоже часть 
сpеды. А их pасположение и положение самого Pобота задают конкpетное 
<B>состояние среды</B>. 
<P><IMG height=18 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0001.gif" 
width=16><B> <U>Система команд</U></B>. Каждый исполнитель может выполнять 
команды только из некотоpого стpого заданного списка — системы команд 
исполнителя. Для каждой команды должны быть заданы <B>условия пpименимости</B> 
(в каких состояниях сpеды может быть выполнена команда) и описаны<B> pезультаты 
выполнения команды</B>. Напpимеp, команда Pобота "ввеpх" может быть выполнена, 
если выше Pобота нет стены. Ее pезультат — смещение Pобота на одну клетку ввеpх. 

<P><IMG height=18 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0001.gif" 
width=16> После вызова команды исполнитель совеpшает соответствующее 
<B><U>элементаpное действие</U></B>. 
<P><IMG height=18 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0001.gif" 
width=16><B> <U>Отказы</U></B> исполнителя возникают, если команда вызывается 
пpи недопустимом для нее состоянии сpеды. 
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD>Обычно исполнитель ничего не знает о цели алгоpитма. Он выполняет все 
      полученные команды, не задавая вопросов "почему" и "зачем". 
</TD></TR></TBODY></TABLE></CENTER>
<P>В информатике универсальным исполнителем алгоритмов является 
<B>компьютер</B>.</P>
<H2> Какими свойствами обладают алгоpитмы?</H2>
<P>Основные свойства алгоритмов следующие: 
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0002.gif" 
width=15><B> <U>Понятность</U></B> для исполнителя — т.е. исполнитель алгоритма 
должен знать, как его выполнять. 
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0003.gif" 
width=15><B> <U>Дискpетность</U></B> (прерывность, раздельность) — т.е. алгоpитм 
должен пpедставлять пpоцесс pешения задачи как последовательное выполнение 
пpостых (или pанее опpеделенных) шагов (этапов). 
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0004.gif" 
width=15><B> <U>Опpеделенность</U></B> — т.е. каждое пpавило алгоpитма должно 
быть четким, однозначным и не оставлять места для пpоизвола. Благодаpя этому 
свойству выполнение алгоpитма носит механический хаpактеp и не тpебует никаких 
дополнительных указаний или сведений о pешаемой задаче. <A name=RESULTANBLE></A>
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0005.gif" 
width=15><B> <U>Pезультативность</U></B> (или конечность). Это свойство состоит 
в том, что алгоpитм должен пpиводить к pешению задачи за конечное число шагов. 
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0006.gif" 
width=15><B> <U>Массовость</U></B>. Это означает, что алгоpитм pешения задачи 
pазpабатывается в общем виде, т.е. он должен быть пpименим для некотоpого класса 
задач, pазличающихся лишь исходными данными. Пpи этом исходные данные могут 
выбиpаться из некотоpой области, котоpая называется областью пpименимости 
алгоpитма.</P>
<H2> В какой форме записываются алгоритмы?</H2>
<P>На практике наиболее распространены следующие формы представления алгоритмов: 

<UL>
  <LI><B><A 
  href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_5.html">словесная</A></B> 
  (записи на естественном языке); 
  <LI><B><A 
  href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_6.html">графическая</A></B> 
  (изображения из графических символов); 
  <LI><B><A 
  href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_7.html">псевдокоды</A></B> 
  (полуформализованные описания алгоритмов на условном алгоритмическом языке, 
  включающие в себя как элементы языка программирования, так и фразы 
  естественного языка, общепринятые математические обозначения и др.); 
  <LI><B><A 
  href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_12.html">программная</A></B> 
  (тексты на языках программирования). </LI></UL>
<P></P>
<H2> Что такое словесный способ записи алгоритмов?</H2>
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD><I><U>Словесный способ</U></I> записи алгоритмов представляет собой 
      описание последовательных этапов обработки данных. Алгоритм задается в 
      произвольном изложении на естественном языке. 
</TD></TR></TBODY></TABLE></CENTER>
<P>Например. Записать алгоритм нахождения <B>наибольшего общего делителя 
(НОД)</B> двух натуральных чисел. 
<P>Алгоритм может быть следующим: 
<OL>
  <LI>задать два числа; 
  <LI>если числа равны, то взять любое из них в качестве ответа и остановиться, 
  в противном случае продолжить выполнение алгоритма; 
  <LI>определить большее из чисел; 
  <LI>заменить большее из чисел разностью большего и меньшего из чисел; 
  <LI>повторить алгоритм с шага 2. </LI></OL>
<P>Описанный алгоритм применим к любым натуральным числам и должен приводить к 
решению поставленной задачи. Убедитесь в этом самостоятельно, определив с 
помощью этого алгоритма наибольший общий делитель чисел 125 и 75. 
<P>Словесный способ не имеет широкого распространения по следующим причинам: 
<UL>
  <LI>такие описания строго не формализуемы; 
  <LI>страдают многословностью записей; 
  <LI>допускают неоднозначность толкования отдельных предписаний. </LI></UL>
<P></P>
<H2> Что такое графический способ записи алгоритмов?</H2>
<P>Графический способ представления алгоритмов является более компактным и 
наглядным по сравнению со словесным. 
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD>При графическом представлении алгоритм изображается в виде 
      последовательности связанных между собой функциональных блоков, каждый из 
      которых соответствует выполнению одного или нескольких действий. 
  </TD></TR></TBODY></TABLE></CENTER>
<P>Такое графическое представление называется схемой алгоритма или 
<B>блок-схемой</B>. 
<P>В блок-схеме каждому типу действий (вводу исходных данных, вычислению 
значений выражений, проверке условий, управлению повторением действий, окончанию 
обработки и т.п.) соответствует геометрическая фигура, представленная в виде 
<B>блочного символа</B>. Блочные символы соединяются <B>линиями переходов</B>, 
определяющими очередность выполнения действий. 
<P>В таблице 7.1 приведены наиболее часто употребляемые символы. <BR>&nbsp; 
<TABLE border=1>
  <TBODY>
  <TR>
    <TD align=middle>Название символа</TD>
    <TD align=middle>Обозначение и пример заполнения</TD>
    <TD align=middle>Пояснение</TD></TR>
  <TR>
    <TD align=middle>Процесс</TD>
    <TD align=middle><IMG height=62 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0007.gif" 
      width=106></TD>
    <TD align=middle>Вычислительное действие или последовательность 
  действий</TD></TR>
  <TR>
    <TD align=middle>Решение</TD>
    <TD align=middle><IMG height=53 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0008.gif" 
      width=131></TD>
    <TD align=middle>Проверка условий</TD></TR>
  <TR>
    <TD align=middle>Модификация</TD>
    <TD align=middle><IMG height=55 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0009.gif" 
      width=156></TD>
    <TD align=middle>Начало цикла</TD></TR>
  <TR>
    <TD align=middle>Предопределенный процесс</TD>
    <TD align=middle><IMG height=57 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0010.gif" 
      width=106></TD>
    <TD align=middle>Вычисления по подпрограмме, стандартной 
подпрограмме</TD></TR>
  <TR>
    <TD align=middle>Ввод-вывод</TD>
    <TD align=middle><IMG height=57 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0011.gif" 
      width=73></TD>
    <TD align=middle>Ввод-вывод в общем виде</TD></TR>
  <TR>
    <TD align=middle>Пуск-останов</TD>
    <TD align=middle><IMG height=43 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0012.gif" 
      width=85></TD>
    <TD align=middle>Начало, конец алгоритма, вход и выход в 
подпрограмму</TD></TR>
  <TR>
    <TD align=middle>Документ</TD>
    <TD align=middle><IMG height=72 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0013.gif" 
      width=81></TD>
    <TD align=middle>Вывод результатов на печать</TD></TR></TBODY></TABLE>
<P><IMG height=9 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0014.gif" 
width=12> Блок <B>"процесс"</B> применяется для обозначения действия или 
последовательности действий, изменяющих значение, форму представления или 
размещения данных. Для улучшения наглядности схемы несколько отдельных блоков 
обработки можно объединять в один блок. Представление отдельных операций 
достаточно свободно. 
<P><IMG height=9 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0014.gif" 
width=12> Блок <B>"решение"</B> используется для обозначения переходов 
управления по условию. В каждом блоке "решение" должны быть указаны вопрос, 
условие или сравнение, которые он определяет. 
<P><IMG height=9 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0014.gif" 
width=12> Блок <B>"модификация"</B> используется для организации циклических 
конструкций. (Слово модификация означает видоизменение, преобразование). Внутри 
блока записывается параметр цикла, для которого указываются его начальное 
значение, граничное условие и шаг изменения значения параметра для каждого 
повторения. 
<P><IMG height=9 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0014.gif" 
width=12> Блок <B>"предопределенный процесс"</B> используется для указания 
обращений к вспомогательным алгоритмам, существующим автономно в виде некоторых 
самостоятельных модулей, и для обращений к библиотечным подпрограммам.</P>
<H2>Что такое псевдокод?</H2>
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD><U>Псевдокод</U> представляет собой систему обозначений и правил, 
      предназначенную для единообразной записи алгоритмов. 
</TD></TR></TBODY></TABLE></CENTER>
<P>Он занимает промежуточное место между естественным и формальным языками. 
<P>С одной стороны, он близок к обычному естественному языку, поэтому алгоритмы 
могут на нем записываться и читаться как обычный текст. С другой строны, в 
псевдокоде используются некоторые формальные конструкции и математическая 
символика, что приближает запись алгоритма к общепринятой математической записи. 

<P><B>В псевдокоде не приняты строгие синтаксические правила для записи 
команд</B>, присущие формальным языкам, что облегчает запись алгоритма на стадии 
его проектирования и дает возможность использовать более широкий набор команд, 
рассчитанный на абстрактного исполнителя. Однако в псевдокоде обычно <B>имеются 
некоторые конструкции, присущие формальным языкам</B>, что облегчает переход от 
записи на псевдокоде к записи алгоритма на формальном языке. В частности, в 
псевдокоде, так же, как и в формальных языках, есть <B><A 
href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_8.html">служебные 
слова</A></B>, смысл которых определен раз и навсегда. Они выделяются в печатном 
тексте жирным шрифтом, а в рукописном тексте подчеркиваются. Единого или 
формального определения псевдокода не существует, поэтому возможны различные 
псевдокоды, отличающиеся набором служебных слов и основных (базовых) 
конструкций. 
<P>Примером псевдокода является школьный алгоритмический язык в русской нотации 
(<A 
href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_8.html">школьный 
АЯ</A>), описанный в учебнике А.Г. Кушниренко и др. "Основы информатики и 
вычислительной техники", 1991. Этот язык в дальнейшем мы будем называть просто 
"алгоритмический язык".</P>
<H2> Как записываются алгоритмы на школьном алгоритмическом языке?</H2>
<H4>Основные служебные слова</H4>
<CENTER>
<TABLE border=0 width="100%">
  <TBODY>
  <TR>
    <TD><B>алг</B> (алгоритм)</TD>
    <TD><B>сим</B> (символьный)</TD>
    <TD><B>дано</B></TD>
    <TD><B>для</B></TD>
    <TD><B>да</B></TD></TR>
  <TR>
    <TD><B>арг</B> (аргумент)</TD>
    <TD><B>лит</B> (литерный)</TD>
    <TD><B>надо</B></TD>
    <TD><B>от</B></TD>
    <TD><B>нет</B></TD></TR>
  <TR>
    <TD><B>рез</B> (результат)</TD>
    <TD><B>лог</B> (логический)</TD>
    <TD><B>если</B></TD>
    <TD><B>до</B></TD>
    <TD><B>при</B></TD></TR>
  <TR>
    <TD><B>нач</B> (начало)</TD>
    <TD><B>таб</B>(таблица)</TD>
    <TD><B>то</B></TD>
    <TD><B>знач</B></TD>
    <TD><B>выбор</B></TD></TR>
  <TR>
    <TD><B>кон</B> (конец)</TD>
    <TD><B>нц</B> (начало цикла)</TD>
    <TD><B>иначе</B></TD>
    <TD><B>и</B></TD>
    <TD><B>ввод</B></TD></TR>
  <TR>
    <TD><B>цел</B> (целый)</TD>
    <TD><B>кц</B> (конец цикла)</TD>
    <TD><B>все</B></TD>
    <TD><B>или</B></TD>
    <TD><B>вывод</B></TD></TR>
  <TR>
    <TD><B>вещ</B> (вещественный)</TD>
    <TD><B>длин</B> (длина)</TD>
    <TD><B>пока</B></TD>
    <TD><B>не</B></TD>
    <TD><B>утв</B></TD></TR></TBODY></TABLE></CENTER><BR>
<CENTER>
<TABLE bgColor=#e1e1e1 border=1 cellPadding=5 cols=1 width="70%">
  <TBODY>
  <TR>
    <TD><B>Общий вид алгоритма:</B> <PRE><B> алг</B> название алгоритма (аргументы и результаты)
   <B>дано</B> условия применимости алгоритма
   <B>надо</B> цель выполнения алгоритма
 <B>нач</B> описание промежуточных величин
 |   последовательность команд (тело алгоритма)
 <B>кон</B>
</PRE></TD></TR></TBODY></TABLE></CENTER>
<P>Часть алгоритма от слова <B>алг</B> до слова <B>нач</B> называется 
<B><U>заголовком</U></B>, а часть, заключенная между словами <B>нач</B> и 
<B>кон</B> — <B><U>телом</U></B> алгоритма. 
<P>В предложении <B>алг</B> после названия алгоритма в круглых скобках 
указываются <B>характеристики</B> (<B>арг, рез</B>) и <B>тип значения (цел, вещ, 
сим, лит </B>или<B> лог)</B> всех <B>входных</B> (<B>аргументы</B>) и 
<B>выходных</B> (<B>результаты</B>) <B>переменных</B>. При описании массивов 
(таблиц) используется служебное слово <B>таб</B>, дополненное <B>граничными 
парами</B> по каждому индексу элементов массива. 
<P>Примеры предложений <U>алг</U>: 
<UL type=circle>
  <LI><B>алг</B> Объем и площадь цилиндра (<B>арг вещ</B> R, H, <B>рез вещ</B> 
  V, S) 
  <LI><B>алг</B> Корни КвУр(<B>арг вещ</B> а, b, c, <B>рез вещ</B> x1, x2, 
  <B>рез лит</B> t) 
  <LI><B>алг</B> Исключить элемент(<B>арг цел</B> N, <B>арг рез вещ таб</B> 
  А[1:N]) 
  <LI><B>алг</B> Диагональ(<B>арг цел</B> N, <B>арг цел таб</B> A[1:N,1:N], 
  <B>рез лит</B> Otvet) </LI></UL>
<P>Предложения <B>дано</B> и <B>надо</B> не обязательны. В них рекомендуется 
записывать утверждения, описывающие <B><A 
href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_2.html">состояние 
среды исполнителя алгоритма</A></B>, например: 
<OL>
  <LI><PRE><B>алг</B> Замена (<B>арг лит</B> Str1, Str2, <B>арг рез лит</B> Text)
<B>дано</B> | длины подстрок Str1 и Str2 совпадают
<B>надо</B> | всюду в строке Text подстрока Str1 заменена на Str2
</PRE>
  <LI><PRE><B>алг</B> Число максимумов (<B>арг цел</B> N,<B> арг вещ таб</B> A[1:N], <B>рез цел</B> K)
<B>дано</B> | N&gt;0
<B>надо</B> | К - число максимальных элементов в таблице А
</PRE>
  <LI><PRE><B>алг</B> Сопротивление (<B>арг вещ</B> R1, R2,<B> арг цел</B> N, <B>рез вещ</B> R)
<B>дано</B> | N&gt;5, R1&gt;0, R2&gt;0
<B>надо</B> | R - сопротивление схемы
</PRE></LI></OL>
<P>Здесь в предложениях <B>дано</B> и <B>надо</B> после знака "|" записаны 
<B>комментарии</B>. Комментарии можно помещать в конце любой строки. Они не 
обрабатываются транслятором, но существенно облегчают понимание алгоритма. 
<H4>Команды школьного АЯ</H4>
<P><IMG height=18 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0001.gif" 
width=16><B> Оператор присваивания</B>. Служит для вычисления выражений и 
присваивания их значений переменным. Общий вид: <B>А := В</B>, где знак ":=" 
означает команду <B>заменить прежнее значение переменной, стоящей в левой 
части</B>, <B>на вычисленное значение выражения, стоящего в правой части</B>. 
<P>Например, <TT>a:=(b+c)*sin(Pi/4); i:=i+1</TT>. 
<P><IMG height=18 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0001.gif" 
width=16> Для ввода и вывода данных используют команды 
<UL>
  <LI><B>ввод</B> имена переменных 
  <LI><B>вывод</B> имена переменных, выражения, тексты. </LI></UL>
<P><IMG height=18 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0001.gif" 
width=16><B> Для ветвления</B> применяют команды <B>если</B> и <B>выбор</B>, для 
<B>организации циклов</B> — команды <B>для</B> и <B>пока</B>
<H4>Пример записи алгоритма на школьном АЯ</H4><PRE><B>алг</B> Сумма квадратов (<B>арг цел</B> n, <B>рез цел</B> S)
<B>дано</B> | n &gt; 0
<B>надо</B> | S = 1*1 + 2*2 + 3*3 + ... + n*n
<B>нач цел</B> i
<B>&nbsp; ввод</B> n; S:=0
<B>&nbsp; нц для</B> i <B>от</B> 1 <B>до</B> n
&nbsp;&nbsp;&nbsp; S:=S+i*i
<B>&nbsp; кц</B>
<B>&nbsp; вывод</B> "S = ", S
<B>кон</B>
</PRE>
<P></P>
<H2>Что такое базовые алгоритмические структуры?</H2>
<P>Алгоритмы можно представлять как некоторые структуры, состоящие из отдельных 
<B>базовых</B> (т.е. основных) <B>элементов</B>. Естественно, что при таком 
подходе к алгоритмам изучение основных принципов их конструирования должно 
начинаться с изучения этих базовых элементов. Для их описания будем использовать 
язык схем алгоритмов и школьный алгоритмический язык. 
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD>Логическая структура любого алгоритма может быть представлена 
      комбинацией трех базовых структур: 
      <CENTER><I>следование, ветвление, 
цикл.</I></CENTER></TD></TR></TBODY></TABLE></CENTER>
<P><B>Характерной особенностью базовых структур является наличие в них одного 
входа и одного выхода.</B> 
<P>1. <B>Базовая структура <U>следование</U></B>. Образуется из 
последовательности действий, следующих одно за другим: 
<TABLE align=center border=0 cellSpacing=20>
  <TBODY>
  <TR>
    <TD><U>Школьный алгоритмический язык</U></TD>
    <TD><U>Язык блок-схем</U></TD></TR>
  <TR>
    <TD align=middle>действие 1<BR>действие 2<BR>. . . . . . . . .<BR>действие 
      n<BR></TD>
    <TD align=middle><IMG height=137 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0015.gif" 
      width=74></TD></TR></TBODY></TABLE><BR>
<P>2. <B>Базовая структура <U>ветвление</U></B>. Обеспечивает в зависимости от 
результата проверки условия (<B>да</B> или <B>нет</B>) выбор одного из 
альтернативных путей работы алгоритма. Каждый из путей ведет к <B>общему 
выходу</B>, так что работа алгоритма будет продолжаться независимо от того, 
какой путь будет выбран. 
<P>Структура <B>ветвление</B> существует в четырех основных вариантах: 
<UL>
  <LI>если-то; 
  <LI>если-то-иначе; 
  <LI>выбор; 
  <LI>выбор-иначе. </LI></UL>
<TABLE align=center border=1 cellPadding=6>
  <TBODY>
  <TR>
    <TD align=middle>Школьный алгоритмический язык</TD>
    <TD align=middle>Язык блок-схем</TD></TR>
  <TR>
    <TD align=middle colSpan=2>1. <B>если-то</B></TD></TR>
  <TR>
    <TD><PRE> <B>если</B> условие
 <B>&nbsp; то</B> действия
 <B>все</B>
</PRE></TD>
    <TD align=middle><IMG height=104 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0016.gif" 
      width=153></TD></TR>
  <TR>
    <TD align=middle colSpan=2>2. <B>если-то-иначе</B></TD></TR>
  <TR>
    <TD><PRE> <B>если</B> условие
 <B>&nbsp; то</B> действия 1
 <B>&nbsp; иначе</B> действия 2
 <B>все</B>
</PRE></TD>
    <TD align=middle><IMG height=87 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0017.gif" 
      width=192></TD></TR>
  <TR>
    <TD align=middle colSpan=2>3. <B>выбор</B></TD></TR>
  <TR>
    <TD><PRE> <B>выбор</B>
 <B>&nbsp; при</B> условие 1: действия 1
 <B>&nbsp; при</B> условие 2: действия 2
 &nbsp; . . . . . . . . . . . .
 <B>&nbsp; при</B> условие N: действия N
 <B>все</B>
</PRE></TD>
    <TD align=middle><IMG height=166 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0018.gif" 
      width=162></TD></TR>
  <TR>
    <TD align=middle colSpan=2>4. <B>выбор-иначе</B></TD></TR>
  <TR>
    <TD><PRE> <B>выбор</B>
 <B>&nbsp; при</B> условие 1: действия 1
 <B>&nbsp; при</B> условие 2: действия 2
 &nbsp; . . . . . . . . . . . .
 <B>&nbsp; при</B> условие N: действия N
 <B>&nbsp; иначе </B>действия N+1
 <B>все</B>
</PRE></TD>
    <TD align=middle><IMG height=185 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0019.gif" 
      width=153></TD></TR></TBODY></TABLE><BR>
<CENTER><B>Примеры команды <I>если</I></B></CENTER><BR>
<TABLE align=center border=1 cellPadding=6>
  <TBODY>
  <TR>
    <TD align=middle>Школьный алгоритмический язык</TD>
    <TD align=middle>Язык блок-схем</TD></TR>
  <TR>
    <TD><PRE> <B>если</B> x &gt; 0
 <B>&nbsp; то</B> y := sin(x)
 <B>все</B>
</PRE></TD>
    <TD align=middle><IMG height=101 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0020.gif" 
      width=183></TD></TR>
  <TR>
    <TD><PRE> <B>если</B> a &gt; b
 <B>&nbsp; то</B> a := 2*a; b := 1
 <B>&nbsp; иначе</B> b := 2*b
 <B>все</B>
</PRE></TD>
    <TD align=middle><IMG height=96 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0021.gif" 
      width=216></TD></TR>
  <TR>
    <TD><PRE> <B>выбор</B>
 <B>&nbsp; при</B> n = 1: y := sin(x)
 <B>&nbsp; при</B> n = 2: y := cos(x)
 <B>&nbsp; при</B> n = 3: y := 0
 <B>все</B>
</PRE></TD>
    <TD align=middle><IMG height=161 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0022.gif" 
      width=192></TD></TR>
  <TR>
    <TD><PRE> <B>выбор</B>
 <B>&nbsp; при</B> a &gt; 5: i := i+1
 <B>&nbsp; при</B> a = 0: j := j+1
 <B>&nbsp; иначе</B> i := 10; j:=0
 <B>все</B>
</PRE></TD>
    <TD align=middle><IMG height=147 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0023.gif" 
      width=186></TD></TR></TBODY></TABLE><BR>&nbsp; 
<P>3. <B>Базовая структура <U>цикл</U>.</B> Обеспечивает <B>многократное 
выполнение</B> некоторой совокупности действий, которая называется <B>телом 
цикла</B>. Основные разновидности циклов представлены в таблице:<BR>&nbsp;<BR>
<TABLE align=center border=1 cellPadding=6>
  <TBODY>
  <TR>
    <TD align=middle>Школьный алгоритмический язык</TD>
    <TD align=middle>Язык блок-схем</TD></TR>
  <TR>
    <TD align=middle colSpan=2>Цикл типа <B><I>пока</I></B>. 
      <P>Предписывает выполнять тело цикла до тех пор, пока выполняется условие, 
      записанное после слова пока. </P></TD></TR>
  <TR>
    <TD><PRE> <B>нц пока</B> условие
 &nbsp; тело цикла (последовательность действий)
 <B>кц</B>
</PRE></TD>
    <TD align=middle><IMG height=118 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0024.gif" 
      width=126></TD></TR>
  <TR>
    <TD align=middle colSpan=2>Цикл типа <B><I>для</I></B>. 
      <P>Предписывает выполнять тело цикла для всех значений некоторой 
      переменной (параметра цикла) в заданном диапазоне. </P></TD></TR>
  <TR>
    <TD><PRE> <B>нц для</B> i <B>от</B> i1<B> до</B> i2
 &nbsp; тело цикла (последовательность действий)
 <B>кц</B>
</PRE></TD>
    <TD align=middle><IMG height=121 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0025.gif" 
      width=132></TD></TR></TBODY></TABLE><BR>
<CENTER><B>Примеры команд <I>пока</I> и <I>для</I></B></CENTER><BR>
<TABLE align=center border=1 cellPadding=6>
  <TBODY>
  <TR>
    <TD align=middle>Школьный алгоритмический язык</TD>
    <TD align=middle>Язык блок-схем</TD></TR>
  <TR>
    <TD><PRE> <B>нц пока</B> i &lt;= 5
 &nbsp; S := S+A[i]
 &nbsp; i := i+1
 <B>кц</B>
</PRE></TD>
    <TD align=middle><IMG height=125 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0026.gif" 
      width=123></TD></TR>
  <TR>
    <TD><PRE> <B>нц для</B> i <B>от</B> 1 <B>до</B> 5
 &nbsp; X[i] := i*i*i
 &nbsp; Y[i] := X[i]/2
 <B>кц</B>
</PRE></TD>
    <TD align=middle><IMG height=103 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0027.gif" 
      width=112></TD></TR></TBODY></TABLE><BR>&nbsp;<BR>
<H2>Какие циклы называют итерационными?</H2>
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD>Особенностью итерационного цикла является то,что число повторений 
      операторов тела цикла заранее неизвестно. Для его организации используется 
      цикл типа <U><A 
      href="http://sec17.vstu.vinnica.ua/teacher/book/practice/2_4/2_4_0.html">пока</A></U>. 
      Выход из итерационного цикла осуществляется в случае выполнения заданного 
      условия. </TD></TR></TBODY></TABLE></CENTER>
<P>На каждом шаге вычислений происходит <B>последовательное приближение и 
проверка условия достижения искомого результата.</B> 
<P><I>Пример. Составить алгоритм вычисления суммы ряда</I> <BR>&nbsp; 
<CENTER><IMG height=43 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0028.gif" 
width=265></CENTER><BR><I>с заданной точностью&nbsp;<IMG align=ABSCENTER 
height=14 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0029.gif" 
width=15>(для данного знакочередующегося степенного ряда требуемая точность 
будет достигнута, когда очередное слагаемое станет по абсолютной величине 
меньше<IMG align=ABSCENTER height=14 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0029.gif" 
width=15>).</I> 
<P>Вычисление сумм — типичная циклическая задача. Особенностью же нашей 
конкретной задачи является то, что число слагаемых (а, следовательно, и число 
повторений тела цикла) заранее неизвестно. Поэтому выполнение цикла должно 
завершиться в момент достижения требуемой точности. 
<P>При составлении алгоритма нужно учесть, что знаки слагаемых чередуются и 
степень числа х в числителях слагаемых возрастает. 
<P>Решая эту задачу "в лоб" путем вычисления на каждом i-ом шаге частичной суммы 
<BR>&nbsp; 
<CENTER>S:=S+(-1)**(i-1)*x**i/i ,</CENTER><BR>мы получим очень неэффективный 
алгоритм, требующий выполнения большого числа операций. Гораздо лучше 
организовать вычисления следующим образом: если обозначить числитель какого-либо 
слагаемого буквой р, то у следующего слагаемого числитель будет равен -р*х (знак 
минус обеспечивает чередование знаков слагаемых), а само слагаемое m будет равно 
p/i, где i - номер слагаемого. 
<P>Сравните эти два подхода по числу операций. <BR>&nbsp; 
<TABLE align=center border=1 cellPadding=6>
  <TBODY>
  <TR>
    <TD align=middle>Алгоритм на школьном АЯ</TD>
    <TD align=middle>Блок-схема алгоритма</TD></TR>
  <TR>
    <TD><PRE> <B>алг</B> Сумма (<B>арг вещ</B> x, Eps, <B>рез вещ</B> S)
 <B>&nbsp; дано</B> | 0 &lt; x &lt; 1
 <B>&nbsp; надо</B> | S = x - x**2/2 + x**3/3 - ...
 <B>нач цел</B> i,<B> вещ</B> m, p
 <B>&nbsp; ввод</B> x, Eps
 &nbsp; S:=0; i:=1 | начальные значения
 &nbsp; m:=1; p:=-1
 <B>&nbsp; нц пока</B> abs(m) &gt; Eps
   &nbsp; p:=-p*x | p - числитель
   &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| очередного слагаемого
   &nbsp; m:=p/i&nbsp; | m - очередное слагаемое
   &nbsp; S:=S+m&nbsp; | S - частичная сумма
   &nbsp; i:=i+1&nbsp; | i - номер
   &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| очередного слагаемого
 <B>&nbsp; кц</B>
 <B>&nbsp; вывод</B> S
 <B>кон</B>
</PRE></TD>
    <TD align=middle><IMG height=320 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0030.gif" 
      width=136></TD></TR></TBODY></TABLE>
<P>Алгоритм, в состав которого входит итерационный цикл, называется 
<B>итеpационным алгоpитмом.</B> Итерационные алгоритмы используются при 
реализации итерационных численных методов. 
<P>В итерационных алгоритмах необходимо обеспечить обязательное достижение 
условия выхода из цикла (<B>сходимость итерационного процесса</B>). В противном 
случае произойдет <B>зацикливание</B> алгоритма, т.е. не будет выполняться 
основное свойство алгоритма — <B><A 
href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_3.html#RESULTANBLE">результативность</A></B>.</P>
<H2>7.11. Что такое вложенные циклы?</H2>
<P>Возможны случаи, когда внутри тела цикла необходимо повторять некоторую 
последовательность операторов, т. е. организовать внутренний цикл. Такая 
структура получила название <B><A 
href="http://sec17.vstu.vinnica.ua/teacher/book/practice/2_3/2_3_0.html">цикла в 
цикле</A></B> или <B>вложенных циклов</B>. Глубина вложения циклов (то есть 
количество вложенных друг в друга циклов) может быть различной. 
<P>При использовании такой структуры для экономии машинного времени необходимо 
выносить из внутреннего цикла во внешний все операторы, которые не зависят от 
параметра внутреннего цикла. 
<H4>Пример вложенных циклов <I>для</I></H4>
<P>Вычислить сумму элементов заданной матрицы А(5,3). <BR>&nbsp; 
<TABLE align=center border=0 cellPadding=6>
  <TBODY>
  <TR>
    <TD align=middle>Матрица А<BR>&nbsp;<BR><IMG height=174 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0031.gif" 
      width=114></TD>
    <TD align=middle><IMG height=233 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0032.gif" 
      width=171></TD>
    <TD><PRE> <B>нц для</B> i <B>от</B> 1 <B>до</B> 5
 <B>&nbsp; нц для</B> j <B>от</B> 1<B> до</B> 3
 &nbsp;&nbsp;&nbsp; S:=S+A[i,j]
 <B>&nbsp; кц</B>
 <B>кц</B>
</PRE></TD></TR></TBODY></TABLE>
<H4>Пример вложенных циклов <I>пока</I></H4>
<P>Вычислить произведение тех элементов заданной матрицы A(10,10), которые 
расположены на пересечении четных строк и четных столбцов. <BR>&nbsp; 
<TABLE align=center border=0 cellPadding=6>
  <TBODY>
  <TR>
    <TD align=middle><IMG height=341 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0033.gif" 
      width=169></TD>
    <TD><PRE> i:=2; P:=1
 <B>нц пока</B> i &lt;= 10
 &nbsp; j:=2
 <B>&nbsp; нц пока</B> j &lt;= 10
 &nbsp;&nbsp;&nbsp; P:=P*A[i,j]
 &nbsp;&nbsp;&nbsp; j:=j+2
 <B>&nbsp; кц</B>
 &nbsp; i:=i+2
 <B>кц</B>
</PRE></TD></TR></TBODY></TABLE></P>
<H2> Чем отличается программный способ записи алгоритмов от других?</H2>
<P>При записи алгоритма в словесной форме, в виде блок-схемы или на псевдокоде 
допускается определенный произвол при изображении команд. Вместе с тем такая 
запись точна настолько, что позволяет человеку понять суть дела и исполнить 
алгоритм. 
<P>Однако на практике в качестве исполнителей алгоритмов используются 
специальные автоматы — компьютеры. Поэтому алгоритм, предназначенный для 
исполнения на компьютере, должен быть записан на "понятном" ему языке. И здесь 
на первый план выдвигается необходимость <B>точной записи команд, не оставляющей 
места для произвольного толкования их исполнителем.</B> 
<P>Следовательно, <B>язык для записи алгоритмов должен быть формализован.</B> 
Такой язык принято называть <B>языком программирования</B>, а запись алгоритма 
на этом языке — <B>программой для компьютера</B>.</P>
<H2>Что такое уровень языка программирования?</H2>
<P>В настоящее время в мире существует несколько сотен реально используемых 
языков программирования. Для каждого есть своя область применения. 
<P>Любой алгоритм, как мы знаем, есть последовательность предписаний, выполнив 
которые можно за конечное число шагов перейти от исходных данных к результату. 
<B>В зависимости от степени детализации предписаний обычно определяется уровень 
языка программирования — чем меньше детализация, тем выше уровень языка.</B> 
<P>По этому критерию можно выделить следующие уровни языков программирования: 
<UL>
  <LI><A 
  href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_14.html">машинные</A>; 

  <LI>машинно-оpиентиpованные (<A 
  href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_15.html">ассемблеpы</A>); 

  <LI>машинно-независимые (языки высокого уровня). </LI></UL>
<P><B>Машинные языки и машинно-ориентированные языки </B>— это языки <B>низкого 
уровня</B>, требующие указания мелких деталей процесса обработки данных. 
<P>Языки же высокого уровня имитируют естественные языки, используя некоторые 
слова разговорного языка и общепринятые математические символы. Эти языки более 
удобны для человека. 
<P>Языки высокого уровня делятся на: 
<UL>
  <LI><B>алгоритмические</B> (Basic, Pascal, C и др.), которые предназначены для 
  однозначного описания алгоритмов; 
  <LI><B>логические</B> (Prolog, Lisp и др.), которые ориентированы не на 
  разработку алгоритма решения задачи, а на систематическое и формализованное 
  описание задачи с тем, чтобы решение следовало из составленного описания. 
  <LI><B>объектно-ориентированные</B> (Object Pascal, C++, Java и др.), в основе 
  которых лежит понятие объекта, сочетающего в себе данные и действия над нами. 
  Программа на объектно-ориентированном языке, решая некоторую задачу, по сути 
  описывает часть мира, относящуюся к этой задаче. Описание действительности в 
  форме системы взаимодействующих объектов естественнее, чем в форме 
  взаимодействующих процедур. </LI></UL>
<P></P>
<H2>Какие у машинных языков достоинства и недостатки?</H2>
<P>Каждый компьютер имеет свой машинный язык, то есть свою совокупность машинных 
команд, которая отличается количеством адресов в команде, назначением 
информации, задаваемой в адресах, набором операций, которые может выполнить 
машина и др. 
<P><B>При программировании на машинном языке программист может держать под своим 
контролем каждую команду и каждую ячейку памяти, использовать все возможности 
имеющихся машинных операций.</B> 
<P>Но процесс написания программы на машинном языке очень <B>трудоемкий</B> и 
<B>утомительный</B>. Программа получается <B>громоздкой, труднообозримой, ее 
трудно отлаживать, изменять и развивать.</B> 
<P>Поэтому в случае, когда нужно иметь эффективную программу, в максимальной 
степени учитывающую специфику конкретного компьютера, вместо машинных языков 
используют близкие к ним машинно-ориентированные языки (ассемблеры).</P>
<H2>Что такое язык ассемблера?</H2>
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD><U>Язык ассемблера</U> — это система обозначений, используемая для 
      представления в удобочитаемой форме программ, записанных в машинном коде. 
    </TD></TR></TBODY></TABLE></CENTER>
<P>Он позволяет программисту пользоваться <B>текстовыми мнемоническими</B> (то 
есть легко запоминаемыми человеком) <B>кодами</B>, по своему усмотрению 
<B>присваивать символические имена регистрам компьютера и памяти, а также 
задавать удобные для себя способы адресации</B>. Кроме того, он позволяет 
использовать различные системы счисления (например, десятичную или 
шестнадцатеричную) для представления числовых констант, использовать в программе 
комментарии и др. 
<P>Перевод программы с языка ассемблера на машинный язык осуществляется 
специальной программой, которая также называется <B>ассемблером</B> и является, 
по сути, простейшим <B><A 
href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter6/1_6_10.html">транслятором</A>.</B></P>
<H2> В чем преимущества алгоритмических языков перед машинными?</H2>
<P>Основные преимущества таковы: 
<UL>
  <LI><B><A 
  href="http://sec17.vstu.vinnica.ua/teacher/book/theory/chapter7/1_7_17.html#ALPHABET">алфавит</A> 
  алгоритмического языка значительно шире алфавита машинного языка</B>, что 
  существенно повы шает наглядность текста программы; 
  <LI><B>набор операций,</B> допустимых для использования,<B> не зависит от 
  набора машинных операций</B>, а выбирается из соображений удобства 
  формулирования алгоритмов решения задач определенного класса; 
  <LI><B>формат предложений</B> достаточно <B>гибок и удобен</B> для 
  использования, что позволяет с помощью одного пред ложения задать достаточно 
  содержательный этап обра ботки данных; 
  <LI>требуемые операции задаются с помощью <B>общепринятых математических 
  обозначений</B>; 
  <LI><B>данным в алгоритмических языках присваиваются индивидуальные имена</B>, 
  выбираемые программистом; 
  <LI>в языке может быть предусмотрен значительно <B>более широкий набор типов 
  данных</B> по сравнению с набором машинных типов данных. </LI></UL>
<P>Таким образом, алгоритмические языки в значительной мере являются 
<B>машинно-независимыми</B>. Они облегчают <B>работу программиста</B> и 
<B>повышают надежность</B> создаваемых <B>программ</B>.</P>
<H2>Какие компоненты образуют алгоритмический язык?</H2>
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD>Алгоритмический язык (как и любой другой язык) образуют три его 
      составляющие: 
      <CENTER><I>алфавит, синтаксис и 
семантика.</I></CENTER></TD></TR></TBODY></TABLE></CENTER><A name=ALPHABET></A>
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0002.gif" 
width=15><B> <U>Алфавит</U></B> — <B>это фиксированный для данного языка набор 
основных символов,</B> т.е. "букв алфавита", из которых должен состоять любой 
текст на этом языке — никакие другие символы в тексте не допускаются. 
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0003.gif" 
width=15><B> <U>Синтаксис</U></B> — <B>это правила построения фраз</B>, 
позволяющие определить, правильно или неправильно написана та или иная фраза. 
Точнее говоря, <B>синтаксис языка представляет собой набор правил, 
устанавливающих, какие комбинации символов являются осмысленными предложениями 
на этом языке.</B> 
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0004.gif" 
width=15><B> <U>Семантика</U></B> определяет смысловое значение предложений 
языка. Являясь системой правил истолкования отдельных языковых конструкций,<B> 
семантика устанавливает, какие последовательности действий описываются теми или 
иными фразами языка </B>и, в конечном итоге, <B>какой алгоритм определен данным 
текстом на алгоритмическом языке.</B></P>
<H2> Какие понятия используют алгоритмические языки?</H2>
<P>Каждое понятие алгоритмического языка подразумевает некоторую синтаксическую 
единицу (конструкцию) и определяемые ею свойства программных объектов или 
процесса обработки данных. 
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD><U>Понятие языка</U> определяется во взаимодействии синтаксических и 
      семантических правил. Синтаксические правила показывают, как образуется 
      данное понятие из других понятий и букв алфавита, а семантические правила 
      определяют свойства данного понятия </TD></TR></TBODY></TABLE></CENTER>
<P>Основными понятиями в алгоритмических языках обычно являются следующие. 
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0002.gif" 
width=15><B> <U>Имена</U></B> (идентификаторы) — <B>употpебляются для 
обозначения объектов пpогpаммы </B>(пеpеменных, массивов, функций и дp.). 
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0003.gif" 
width=15><B> <U>Опеpации</U></B>. Типы операций: 
<UL>
  <LI><B>аpифметические</B> опеpации + , - , * , / и дp. ; 
  <LI><B>логические</B> опеpации <B>и, или, не</B>; 
  <LI>опеpации <B>отношения</B> &lt; , &gt; , &lt;=, &gt;= , = , &lt;&gt; ; 
  <LI>опеpация <B>сцепки</B> (иначе, "присоединения", "конкатенации") символьных 
  значений дpуг с другом с образованием одной длинной строки; изображается 
  знаком "+". </LI></UL>
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0004.gif" 
width=15><B> <U>Данные</U></B> — <B>величины, обpабатываемые пpогpаммой</B>. 
Имеется тpи основных вида данных: <B>константы, пеpеменные и массивы</B>. 
<UL>
  <LI><B>Константы</B> — это данные, которые зафиксированы в тексте программы и 
  не изменяются в процессе ее выполнения. 
  <P>Пpимеpы констант: 
  <UL type=circle>
    <LI><B>числовые</B> 7.5, 12; 
    <LI><B>логические</B> <B>да </B>(истина)<B>, нет </B>(ложь); 
    <LI><B>символьные</B> "А", "+"; 
    <LI><B>литеpные</B> "abcde", "информатика", "" (пустая строка). </LI></UL><BR>
  <LI><B>Пеpеменные</B> обозначаются именами и могут изменять свои значения в 
  ходе выполнения пpогpаммы. Пеpеменные бывают <B>целые, вещественные, 
  логические, символьные и литерные</B>. 
  <LI><B>Массивы — последовательности однотипных элементов, число которых 
  фиксировано и которым присвоено одно имя.</B> Положение элемента в массиве 
  однозначно определяется его индексами (одним, в случае одномерного массива, 
  или несколькими, если массив многомерный). Иногда массивы называют 
  <B>таблицами.</B> </LI></UL>
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0005.gif" 
width=15><B> <U>Выpажения</U> — пpедназначаются для выполнения необходимых 
вычислений</B>, состоят из констант, пеpеменных, указателей функций (напpимеp, 
exp(x)), объединенных знаками опеpаций. 
<P>Выражения записываются в виде <B>линейных последовательностей символов 
</B>(без подстрочных и надстрочных символов, "многоэтажных" дробей и т.д.), что 
позволяет вводить их в компьютер, последовательно нажимая на соответствующие 
клавиши клавиатуры. 
<P>Различают выражения <B>арифметические, логические и строковые.</B> 
<UL>
  <LI><B>Арифметические выражения служат для определения одного числового 
  значения</B>. Например, (1+sin(x))/2. Значение этого выражения при x=0 равно 
  0.5, а при x=p/2 - единице. 
  <LI><B>Логические выражения описывают некоторые условия, которые могут 
  удовлетворяться или не удовлетворяться</B>. Таким образом, логическое 
  выражение может принимать только два значения — <B>"истина"</B> или 
  "<B>ложь"</B> (<B>да</B> или <B>нет</B>). Рассмотрим в качестве примера 
  логическое выражение x*x + y*y &lt; r*r , определяющее принадлежность точки с 
  координатами (x,y) внутренней области круга радиусом r c центром в начале 
  координат. При x=1, y=1, r=2 значение этого выражения — <B>"истина"</B>, а при 
  x=2, y=2, r=1 — <B>"ложь"</B>. 
  <LI><B>Значения строковых (литерных) выражений — текcты</B>. В них могут 
  входить литерные константы, литерные переменные и литерные функции, 
  разделенные знаком операции сцепки. Например, А + В означает присоединение 
  строки В к концу строки А. Если А = <I>"куст "</I>, а В = <I>"зеленый"</I>, то 
  значение выражения А+В есть "<I>куст зеленый"</I>. </LI></UL>
<P><IMG height=15 
src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0006.gif" 
width=15><B> <U>Операторы</U></B> (команды). Оператор — это наиболее крупное и 
содержательное понятие языка: <B>каждый оператор представляет собой законченную 
фразу языка и определяет некоторый вполне законченный этап обработки данных.</B> 
В состав опеpатоpов входят: 
<UL>
  <LI>ключевые слова; 
  <LI>данные; 
  <LI>выpажения и т.д. </LI></UL>
<P>Операторы подpазделяются на исполняемые и неисполняемые. <B>Неисполняемые</B> 
опеpатоpы пpедназначены для описания данных и стpуктуpы пpогpаммы, а 
<B>исполняемые</B> — для выполнения pазличных действий (напpимеp, опеpатоp 
пpисваивания, опеpатоpы ввода и вывода, условный оператор, операторы цикла, 
оператор процедуры и дp.).</P>
<H2> Что такое стандартная функция?</H2>
<P>При решении различных задач с помощью компьютера бывает необходимо вычислить 
логарифм или модуль числа, синус угла и т.д. 
<P>
<CENTER>
<TABLE class=definition>
  <TBODY>
  <TR>
    <TD>Вычисления часто употребляемых функций осуществляются посредством 
      подпрограмм, называемых <U>стандартными функциями</U>, которые заранее 
      запрограммированы и встроены в транслятор языка. 
</TD></TR></TBODY></TABLE></CENTER>
<H4>Таблица стандартных функций школьного алгоритмического языка</H4>
<TABLE border=1 cellPadding=4 width="100%">
  <TBODY>
  <TR>
    <TD colSpan=2>
      <CENTER><FONT size=-1>Название и математическое обозначение 
      функции</FONT></CENTER></TD>
    <TD align=middle width="20%"><FONT size=-1>Указатель функции</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Абсолютная величина (модуль)&nbsp;</FONT></TD>
    <TD><FONT size=-1>| х |&nbsp;</FONT></TD>
    <TD><FONT size=-1>abs(x)&nbsp;</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Корень квадратный</FONT></TD>
    <TD><IMG height=20 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0034.gif" 
      width=23></TD>
    <TD><FONT size=-1>sqrt(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Натуральный логарифм&nbsp;</FONT></TD>
    <TD><FONT size=-1>ln x</FONT></TD>
    <TD><FONT size=-1>ln(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Десятичный логарифм&nbsp;</FONT></TD>
    <TD><FONT size=-1>lg x</FONT></TD>
    <TD><FONT size=-1>lg(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Экспонента (степень числа е " 2.72)</FONT></TD>
    <TD><FONT size=-1>e<SUP>x</SUP></FONT></TD>
    <TD><FONT size=-1>exp(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Знак числа x (-1,если х&lt;0; 0,если x=0; 1,если 
      x&gt;0)&nbsp;</FONT></TD>
    <TD><FONT size=-1>sign x</FONT></TD>
    <TD><FONT size=-1>sign(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Целая часть х (т.е. максимальное целое число,не 
      превосходящее х)</FONT></TD>
    <TD>&nbsp;</TD>
    <TD><FONT size=-1>int(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Минимум из чисел х и y</FONT></TD>
    <TD>&nbsp;</TD>
    <TD><FONT size=-1>min(x,y)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Максимум из чисел х и y</FONT></TD>
    <TD>&nbsp;</TD>
    <TD><FONT size=-1>max(x,y)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Частное от деления целого х на целое y</FONT></TD>
    <TD>&nbsp;</TD>
    <TD><FONT size=-1>div(x,y)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Остаток от деления целого х на целое y</FONT></TD>
    <TD>&nbsp;</TD>
    <TD><FONT size=-1>mod(x,y)</FONT></TD></TR>
  <TR>
    <TD width=300><FONT size=-1>Случайное число в диапазоне от 0 до 
    х-1</FONT></TD>
    <TD>&nbsp;</TD>
    <TD><FONT size=-1>rnd(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Синус (угол в радианах)&nbsp;</FONT></TD>
    <TD><FONT size=-1>sin x</FONT></TD>
    <TD><FONT size=-1>sin(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Косинус (угол в радианах)</FONT></TD>
    <TD><FONT size=-1>cos x</FONT></TD>
    <TD><FONT size=-1>cos(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Тангенс (угол в радианах)</FONT></TD>
    <TD><FONT size=-1>tg x</FONT></TD>
    <TD><FONT size=-1>tg(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Котангенс (угол в радианах)</FONT></TD>
    <TD><FONT size=-1>ctg x</FONT></TD>
    <TD><FONT size=-1>ctg(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Арксинус (главное значение в радианах)</FONT></TD>
    <TD width=80><FONT size=-1>arcsin x&nbsp;</FONT></TD>
    <TD><FONT size=-1>arcsin(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Арккосинус (главное значение в радианах)</FONT></TD>
    <TD><FONT size=-1>arccos x</FONT></TD>
    <TD><FONT size=-1>arccos(x)</FONT></TD></TR>
  <TR>
    <TD><FONT size=-1>Арктангенс (главное значение в радианах)</FONT></TD>
    <TD><FONT size=-1>arctg x</FONT></TD>
    <TD><FONT size=-1>arctg(x)</FONT></TD></TR>
  <TR>
    <TD rowSpan=2><FONT size=-1>Арккотангенс (главное значение в 
      радианах)&nbsp;</FONT></TD>
    <TD rowSpan=2><FONT size=-1>arcctg x</FONT></TD>
    <TD rowSpan=2><FONT size=-1>arcctg(x)</FONT></TD></TR></TBODY></TABLE>
<P>В качестве аргументов функций можно использовать константы, переменные и 
выражения. Например: <BR>&nbsp; 
<TABLE align=center cellPadding=0 cellSpacing=0 cols=4 width="80%">
  <TBODY>
  <TR>
    <TD>sin(3.05) <BR>min(a, 5)</TD>
    <TD>&nbsp;sin(x) <BR>&nbsp;min(a, b)</TD>
    <TD>sin(2*y+t/2) <BR>min(a+b, a*b)</TD>
    <TD>sin((exp(x)+1)**2) <BR>min(min(a,b),min(c,d))</TD></TR></TBODY></TABLE><BR>
<P>Каждый язык программирования имеет свой набор стандартных функций.</P>
<H2> Как записываются арифметические выражения?</H2>
<P>Арифметические выражения записываются по следующим правилам: 
<UL>
  <LI>Нельзя опускать знак умножения между сомножителями и ставить рядом два 
  знака операций. 
  <LI>Индексы элементов массивов записываются в квадратных (школьный АЯ, Pascal) 
  или круглых (Basic) скобках. 
  <LI>Для обозначения переменных используются буквы латинского алфавита. 
  <LI><B>Операции выполняются в порядке старшинства</B>: сначала вычисление 
  функций, затем возведение в степень, потом умножение и деление и в последнюю 
  очередь — сложение и вычитание. 
  <LI><B>Операции одного старшинства выполняются слева направо</B>. Например, 
  a/b*c соответствует a/b*c. Однако, в школьном АЯ есть одно <B>исключение</B> 
  из этого правила: операции возведения в степень выполняются справа налево. 
  Так, выражение 2**(3**2) <B>в школьном АЯ</B> вычисляется как 2**(3**2) = 512. 
  В языке QBasic аналогичное выражение 2^3^2 вычислясляется как (2^3)^2 = 64. А 
  в языке <B>Pascal</B> вообще не предусмотрена операция возведения в степень, в 
  Pascal x^y записывается как exp(y*ln(x)), а x^y^z как exp(exp(z*ln(y))*ln(x)). 
  </LI></UL>
<H4>Примеры записи арифметических выражений</H4>
<TABLE align=center border=1 cellPadding=6>
  <TBODY>
  <TR>
    <TD align=middle>Математическая запись</TD>
    <TD align=middle>Запись на школьном алгоритмическом языке</TD></TR>
  <TR>
    <TD align=middle><IMG height=36 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0035.gif" 
      width=23></TD>
    <TD align=middle>x*y/z</TD></TR>
  <TR>
    <TD align=middle><IMG height=39 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0036.gif" 
      width=21></TD>
    <TD align=middle>x/(y*z) или x/y/z</TD></TR>
  <TR>
    <TD align=middle><IMG height=41 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0037.gif" 
      width=55></TD>
    <TD align=middle>(a**3+b**3)/(b*c)</TD></TR>
  <TR>
    <TD align=middle><IMG height=40 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0038.gif" 
      width=77></TD>
    <TD align=middle>(a[i+1]+b[i-1])/(2*x*y)</TD></TR>
  <TR>
    <TD align=middle><IMG height=46 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0039.gif" 
      width=102></TD>
    <TD align=middle>(-b+sqrt(b*b-4*a*c))/(2*a)</TD></TR>
  <TR>
    <TD align=middle><IMG height=20 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0040.gif" 
      width=23>(x&lt;0)</TD>
    <TD align=middle>sign(x)*abs(x)**(1/5)</TD></TR>
  <TR>
    <TD align=middle><IMG height=25 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0041.gif" 
      width=160></TD>
    <TD align=middle>0.49*exp(a*a-b*b)+ln(cos(a*a))**3</TD></TR>
  <TR>
    <TD align=middle><IMG height=65 
      src="Глава 7 — Алгоритмы_ Алгоритмизация_ Алгоритмические языки.files/0042.gif" 
      width=91></TD>
    <TD align=middle>x/(1+x*x/(3+(2*x)**3))</TD></TR></TBODY></TABLE>
<P>Типичные ошибки в записи выражений: <BR>&nbsp; 
<TABLE align=center cellPadding=6 cellSpacing=0 cols=2 width="80%">
  <TBODY>
  <TR>
    <TD width="15%">5x+1 <BR>a+sin x <BR>((a+b)/c**3 </TD>
    <TD>Пропущен знак умножения между 5 и х <BR>Аргумент x функции sin x не 
      заключен в скобки <BR>Не хватает закрывающей скобки 
</TD></TR></TBODY></TABLE></P>
<H2>Как записываются логические выражения?</H2>
<P><B>В записи логических выражений помимо</B> <B>арифметических операций</B> 
сложения, вычитания, умножения, деления и возведения в степень <B>используются 
операции отношения</B> &lt; (меньше), &lt;= (меньше или равно), &gt; (больше), 
&gt;= (больше или равно), = (равно), &lt;&gt; (не равно), <B>а также логические 
операции и, или, не.</B> 
<H4>Примеры записи логических выражений, истинных при выполнении указанных 
условий.</H4>
<TABLE align=center border=1 cellPadding=4>
  <TBODY>
  <TR>
    <TD align=middle>Условие</TD>
    <TD align=middle>Запись на школьном алгоритмическом языке</TD></TR>
  <TR>
    <TD>Дробная часть вещественого числа a равна нулю</TD>
    <TD align=middle>int(a) = 0</TD></TR>
  <TR>
    <TD>Целое число a — четное</TD>
    <TD align=middle>mod(a,2) = 0</TD></TR>
  <TR>
    <TD>Целое число a — нечетное</TD>
    <TD align=middle>mod(a,2) = 1</TD></TR>
  <TR>
    <TD>Целое число k кратно семи</TD>
    <TD align=middle>mod(a,7) = 0</TD></TR>
  <TR>
    <TD>Каждое из чисел a,b положительно</TD>
    <TD align=middle>(a&gt;0) <B>и</B> (b&gt;0)</TD></TR>
  <TR>
    <TD>Только одно из чисел a,b положительно</TD>
    <TD align=middle>((a&gt;0) <B>и</B> (b&lt;=0)) <B>или</B> <BR>((a&lt;=0) 
      <B>и</B> (b&gt;0))</TD></TR>
  <TR>
    <TD>Хотя бы одно из чисел a,b,c является отрицательным</TD>
    <TD align=middle>(a&lt;0) <B>или</B> (b&lt;0) <B>или</B> (c&lt;0)</TD></TR>
  <TR>
    <TD>Число x удовлетворяет условию a&lt;x&lt;b&nbsp;</TD>
    <TD align=middle>(x&gt;a) <B>и</B> (x&lt;b)</TD></TR>
  <TR>
    <TD>Число x имеет значение в промежутке [<A 
      href="http://sec17.vstu.vinnica.ua/teacher/book/theory/literature.html#1">1</A>, 
      <A 
      href="http://sec17.vstu.vinnica.ua/teacher/book/theory/literature.html#3">3</A>]<!--[1,3]--></TD>
    <TD align=middle>(x&gt;=1) <B>и</B> (x&lt;=3)</TD></TR>
  <TR>
    <TD>Целые числа a и b имеют одинаковую четность</TD>
    <TD align=middle>((mod(a,2)=0) <B>и</B> (mod(b,2)=0) <B>или</B> 
      <BR>((mod(a,2)=1) <B>и</B> (mod(b,2)=1))</TD></TR>
  <TR>
    <TD>Точка с координатами (x,y) лежит в круге радиуса r с центром в точке 
      (a,b)</TD>
    <TD align=middle>(x-a)**2+(y-b)**2&lt;r*r</TD></TR>
  <TR>
    <TD>Уравнение ax^2+bx+c=0 не имеет действительных корней</TD>
    <TD align=middle>b*b-4*a*c&lt;0</TD></TR>
  <TR>
    <TD>Точка (x,y) принадлежит первому или третьему квадранту</TD>
    <TD align=middle>((x&gt;0) <B>и</B> (y&gt;0)) <B>или</B> <BR>((x&lt;0) 
      <B>и</B> (y&gt;0))</TD></TR>
  <TR>
    <TD>Точка (x,y) принндлежит внешности единичного круга с центром в начале 
      координат или его второй четверти</TD>
    <TD align=middle>(x*x+y*y&gt;1) <B>или</B> <BR>((x*x+y*y&lt;=1) <B>и</B> 
      <BR>(x&lt;0) <B>и</B> (y&gt;0))</TD></TR>
  <TR>
    <TD>Целые числа a и b являются взаимнопротивоположными</TD>
    <TD align=middle>a = -b</TD></TR>
  <TR>
    <TD>Целые числа a и b являются взаимнообратными</TD>
    <TD align=middle>a*b = 1</TD></TR>
  <TR>
    <TD>Число a больше среднего арифметического чисел b,c,d</TD>
    <TD align=middle>a&gt;(b+c+d)/3</TD></TR>
  <TR>
    <TD>Число a не меньше среднего геометрического чисел b,c,d</TD>
    <TD align=middle>a&gt;=(b+c+d)**(1/3)</TD></TR>
  <TR>
    <TD>Хотя бы одна из логических переменных F1 и F2 имеет значение 
    <B>да</B></TD>
    <TD align=middle>F1 <B>или</B> F2</TD></TR>
  <TR>
    <TD>Обе логические переменые F1 и F2 имеют значение <B>да</B></TD>
    <TD align=middle>F1 <B>и</B> F2</TD></TR>
  <TR>
    <TD>Обе логические переменые F1 и F2 имеют значение <B>нет</B></TD>
    <TD align=middle><B>не</B> F1 <B>и не</B> F2</TD></TR>
  <TR>
    <TD>Логическая переменная F1 имеет значение <B>да</B>, а логическая 
      переменная F2 имеет значение <B>нет</B></TD>
    <TD align=middle>F1 <B>и не</B> F2</TD></TR>
  <TR>
    <TD>Только одна из логических переменных F1 и F2 имеет значение 
    <B>да</B></TD>
    <TD align=middle>(F1 <B>и не</B> F2) <B>или</B> <BR>(F2 <B>и не</B> 
  F1)</TD></TR></TBODY></TABLE>
<P></P>
<HR>
<!--#include file='other_footer_banner'--></BODY></HTML>
